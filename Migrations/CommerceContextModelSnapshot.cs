// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using commerce.Context;

#nullable disable

namespace Commerce.Migrations
{
    [DbContext(typeof(CommerceContext))]
    partial class CommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Commerce.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("product_value");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Carne Bovina para Churrasco",
                            Name = "Carne Bovina",
                            Value = 12m
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Batata Palha - 1Kg",
                            Name = "Batata Palha - 1Kg",
                            Value = 29m
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Queijo Parmesão - 5,5Kg",
                            Name = "Queijo Parmesão - 5,5Kg",
                            Value = 300m
                        });
                });

            modelBuilder.Entity("Commerce.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sale_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SaleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sale_created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sale_name");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int?>("SallerId")
                        .HasColumnType("integer")
                        .HasColumnName("saller_id");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("sale_status");

                    b.Property<decimal>("TotalValueProduct")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_product_value_total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sale_updated_at");

                    b.HasKey("SaleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SallerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Commerce.Models.Saller", b =>
                {
                    b.Property<int>("SallerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("saller_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SallerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("saller_active");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("saller_cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("saller_created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("saller_email");

                    b.Property<string>("NameSaller")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("saller_name_saller");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("saller_telephone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("saller_updated_at");

                    b.HasKey("SallerId");

                    b.ToTable("Sallers");

                    b.HasData(
                        new
                        {
                            SallerId = 1,
                            Active = true,
                            Cpf = "000.000.000-00",
                            CreatedAt = new DateTime(2023, 6, 5, 2, 21, 24, 540, DateTimeKind.Utc).AddTicks(5334),
                            Email = "string",
                            NameSaller = "Person",
                            Telephone = "0000000-0000",
                            UpdatedAt = new DateTime(2023, 6, 5, 2, 21, 24, 540, DateTimeKind.Utc).AddTicks(5335)
                        },
                        new
                        {
                            SallerId = 2,
                            Active = true,
                            Cpf = "000.000.000-00",
                            CreatedAt = new DateTime(2023, 6, 5, 2, 21, 24, 540, DateTimeKind.Utc).AddTicks(5336),
                            Email = "string",
                            NameSaller = "Roberto",
                            Telephone = "0000000-0000",
                            UpdatedAt = new DateTime(2023, 6, 5, 2, 21, 24, 540, DateTimeKind.Utc).AddTicks(5337)
                        },
                        new
                        {
                            SallerId = 3,
                            Active = true,
                            Cpf = "000.000.000-00",
                            CreatedAt = new DateTime(2023, 6, 5, 2, 21, 24, 540, DateTimeKind.Utc).AddTicks(5337),
                            Email = "string",
                            NameSaller = "Gabriela",
                            Telephone = "0000000-0000",
                            UpdatedAt = new DateTime(2023, 6, 5, 2, 21, 24, 540, DateTimeKind.Utc).AddTicks(5338)
                        });
                });

            modelBuilder.Entity("Commerce.Models.Sale", b =>
                {
                    b.HasOne("Commerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Commerce.Models.Saller", "Saller")
                        .WithMany()
                        .HasForeignKey("SallerId");

                    b.Navigation("Product");

                    b.Navigation("Saller");
                });
#pragma warning restore 612, 618
        }
    }
}
